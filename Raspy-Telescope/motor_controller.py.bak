#!/usr/bin/python

import threading
import Queue
import time
import logging
import sys
sys.path.insert(0, "../lib/Adafruit_MotorHAT_mod")
from Adafruit_MotorHAT import Adafruit_MotorHAT, Adafruit_DCMotor, Adafruit_StepperMotor
import Adafruit_PWM_Servo_Driver

def main():
    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG, format="(%(name)s %(threadName)-9s) %(message)s")


class StepperController:
        
        def __init__(self, num, logger=None):
                self._number = num
                self._ppr = 96                          # pulses per revolution for stepper motor
                self.mh = Adafruit_MotorHAT()           # create a default object, no changes to I2C address or frequency
                self.myStepper = self.mh.getStepper(self._ppr, self._number)   #96 steps per revolution. Stepper port num.
                self.mypwm = Adafruit_PWM_Servo_Driver.PWM(0x60, debug=False)   #I2C address 0x60

                self.logger = logger or logging.getLogger(__name__)

                self.speed_pps = 0      #Speed in pulses per second
                self.steps = 0
                self.step_type = 0      #SINGLE = 1     DOUBLE = 2      INTERLEAVE = 3  MICROSTEP = 4

                self.motorq = Queue.Queue(5)

                self.motor_pos = 0
                self.motor_pos_new = 0
                self.motor_speed = 0
                self.motor_half_step = True
                self.motor_running = False

                #Constants from motorhat library
                num -= 1

                if (num == 0):
                        self.PWMA = 8
                        self.AIN2 = 9
                        self.AIN1 = 10
                        self.PWMB = 13
                        self.BIN2 = 12
                        self.BIN1 = 11
                elif (num == 1):
                        self.PWMA = 2
                        self.AIN2 = 3
                        self.AIN1 = 4
                        self.PWMB = 7
                        self.BIN2 = 6
                        self.BIN1 = 5
                else:
                        self.logger.error("MotorHAT Stepper must be between 1 and 2 inclusive")

        # Disable motors/ no force on poles!
        def turn_off_all(self ):
                self.mh.getMotor(1).run(Adafruit_MotorHAT.RELEASE)
                self.mh.getMotor(2).run(Adafruit_MotorHAT.RELEASE)
                self.mh.getMotor(3).run(Adafruit_MotorHAT.RELEASE)
                self.mh.getMotor(4).run(Adafruit_MotorHAT.RELEASE)

        def motor_set_speed(self, speed):
                self.motor_speed = speed
                self.speed_pps = float(speed)/60*self._ppr
                self.logger.info("Speed: {} RPM".format(speed))
                if   self.speed_pps > 95 and  self.speed_pps < 193:
                        self.mypwm.setPWMFreq( self.speed_pps/4)       # Speed is 4 steps per frequency puls
                elif  self.speed_pps < 96:
                        self.mypwm.setPWMFreq(1600)
                        self.myStepper.setSpeed(speed)
                else:
                        self.logger.error("Speed {} rpm is to high or otherwise wrong".format(speed))
                return

        def motor_set_step_type(self, half_step):
                self.motor_half_step = half_step
                if half_step:
                        self.step_type = 3
                else:
                        self.step_type = 2
                return

        def start_motor (self, position=None):
                if self.step_type != 2 and self.step_type != 3:
                    self.motor_set_step_type(self.motor_half_step)
                if not position == None:
                    self.motor_pos_new = position
                if self.speed_pps > 95 and  self.speed_pps < 193:       #High speed stepping
                        if self.step_type == 2:
                            if self.motor_pos_new > self.motor_pos:     #check direction (forward)
                                self.mypwm.setPWM(self.AIN2, 0, 2048)
                                self.mypwm.setPWM(self.BIN1, 1024, 3072)
                                self.mypwm.setPWM(self.AIN1, 2048, 4095)
                                self.mypwm.setPWM(self.BIN2, 3072, 512)
                            else:   
                                self.mypwm.setPWM(self.AIN2, 3072, 512)
                                self.mypwm.setPWM(self.BIN1, 2048, 4095)
                                self.mypwm.setPWM(self.AIN1, 1024, 3072)
                                self.mypwm.setPWM(self.BIN2, 0, 2048)
                        elif self.step_type == 3:
                            if self.motor_pos_new > self.motor_pos:
                                self.mypwm.setPWM(self.AIN2, 0, 1536)
                                self.mypwm.setPWM(self.BIN1, 1024, 2560)
                                self.mypwm.setPWM(self.AIN1, 2048, 3584)
                                self.mypwm.setPWM(self.BIN2, 3072, 512)
                            else:
                                self.mypwm.setPWM(self.AIN2, 3072, 512)
                                self.mypwm.setPWM(self.BIN1, 2048, 3584)
                                self.mypwm.setPWM(self.AIN1, 1024, 2560)
                                self.mypwm.setPWM(self.BIN2, 0, 1536)
                        else:
                                self.logger.error("Other step modes currently not supported")
                         
                        self.motorq.put(["fast", position])
                        self.logger.debug("Putting " + str(["fast", position]) + " : " + str(self.motorq.qsize()) + " items in queue")
                elif self.speed_pps < 96:
                        self.motorq.put(["slow", position])
                        self.logger.debug("speed_pps: {}".format(self.speed_pps))
                        self.logger.debug("Putting " + str(["slow", position]) + " : " + str(self.motorq.qsize()) + " items in queue")
                else:
                        self.logger.error("Speed {} rpm is to high or otherwise wrong".format(self.motor_speed))
                return

            
        def release_motor (self):
            self.mh.setPin(self.AIN2, 0)
            self.mh.setPin(self.BIN1, 0)
            self.mh.setPin(self.AIN1, 0)
            self.mh.setPin(self.BIN2, 0)
            '''if self._number == 2:
                self.mh.getMotor(3).run(Adafruit_MotorHAT.RELEASE)
                self.mh.getMotor(4).run(Adafruit_MotorHAT.RELEASE)
            else :
                self.mh.getMotor(1).run(Adafruit_MotorHAT.RELEASE)
                self.mh.getMotor(2).run(Adafruit_MotorHAT.RELEASE)'''
        
        def stop_motor (self):
                self.motorq.put(["stop", 0])
                self.myStepper.stop_stepper = True
                return
        
        def async_stop(self):
                self.myStepper.stop_stepper = True
                self.motorq.put(["exit", 0])
                return
        def calc_pos(self, direction, start_time):
            if direction:
                self.motor_pos =self.motor_pos + int((time.time() - start_time)*self.speed_pps * (2 if self.motor_half_step else 1))
            else:
                self.motor_pos =self.motor_pos - int((time.time() - start_time)*self.speed_pps * (2 if self.motor_half_step else 1))
 
        def async_motor (self):
                steps = 0
                start_time = 0
                run_time = 0
                step_count = 0
                running_type = "fast"
                
                while True:
                        if not self.motorq.empty():
                                item = self.motorq.get()
                                command = item[0]
                                self.logger.debug("Getting " + str(item) + " : " + str(self.motorq.qsize()) + " items in queue")
                                direction = self.motor_pos_new > self.motor_pos         #True = going out.
                                steps = int(abs(self.motor_pos_new - self.motor_pos))   #Add steps if going out
                                if command == "exit":
                                        #TODO: exec stop commands first
                                        self.turn_off_all()
                                        break
                                elif command == "fast":
                                        running_type = command
                                        try:
                                              if   self.motor_half_step:
                                                  #t= steps/pulses per second
                                                  run_time = (float(abs(steps))/float(self.speed_pps))/2
                                              else:
                                                  run_time = (float(abs(steps))/float(self.speed_pps))
                                              if run_time > 0.1:
                                                  start_time = time.time()
                                                  self.mypwm.setPWM(self.PWMA, 0, 4095)
                                                  self.mypwm.setPWM(self.PWMB, 0, 4095)
                                                  self.motor_running = True
                                                  self.logger.info("Going to position {}".format(self.motor_pos_new))
                                              else:
                                                  pass
                                        except:
                                                self.logger.error("Start fast fault")
                                elif command == "slow":
                                        running_type = command
                                        try:
                                            if   self.step_type == 3:
                                                  #t= steps/pulses per second
                                                  run_time = (float(abs(steps))/float(self.speed_pps))/2
                                            else:
                                                  run_time = (float(abs(steps))/float(self.speed_pps)) 
                                            start_time = time.time()
                                            self.motor_running = True
                                            self.logger.info("Going to position {}".format(self.motor_pos_new))
                                            step_count = self.myStepper.step(steps, direction,  self.step_type)
                                            self.release_motor()
                                        except:
                                            self.logger.exception("Start slow fault")
                                elif command == "stop":
                                    self.release_motor()

                                    self.motor_running = False
                                    
                                    if running_type == "slow":
                                        if direction:
                                            self.motor_pos = self.motor_pos + steps - step_count
                                        else:
                                            self.motor_pos = self.motor_pos - steps - step_count
                                    elif running_type == "fast":                                        
                                        self.calc_pos(direction, start_time)
                                    run_time = 0
                                    self.logger.info("Reached position {}, {}".format(self.motor_pos, direction))

                        # Catch the time to stop the execution of fast moving motor.
                        if self.motor_running and time.time() - start_time >= run_time:
                                stop_time = time.time()
                                self.logger.debug("Running time: {}, expected time: {}".format(stop_time - start_time, run_time))
                                run_time = 0
                                self.motor_running = False

                                if running_type == "fast":                               
                                        self.mypwm.setPWM(self.PWMA, 0, 0)
                                        self.mypwm.setPWM(self.PWMB, 0, 0)
                                        self.calc_pos(direction, start_time)
                                elif running_type == "slow":
                                        if direction:
                                            self.motor_pos = self.motor_pos + steps
                                        else:
                                            self.motor_pos = self.motor_pos - steps
                                        
                                self.logger.info("Reached position {}".format(self.motor_pos))
                        time.sleep(0.05)
                        
                return

class DCMotorController:

    def __init__(self, num):
        self._number = num
        self.mh = Adafruit_MotorHAT()   #Open motor hat instance
        self.motor = mh.getMotor(self._number)

    def stop_motor (self):
        self.motor.run(MtrHat.Adafruit_MotorHAT.RELEASE)

    def start_motor (self, duty_cycle, direction):
        direction = True    #True is forward
        self.motorq.put(["DCMotor", duty_cycle , direction])
        self.logger.debug("Putting " + str(["DCMotor", duty_cycle]) + " : " + str(self.motorq.qsize()) + " items in queue")
                        

if __name__ == '__main__':
        main()

        controller = StepperController(2)

        motor_thread = threading.Thread(target=controller.async_motor)
        #read_thread.setDaemon(True)
        motor_thread.start()
        #controller.motorq.put(["exit", 0])
        time.sleep(2)
        while True: 
                try:
                        
                        controller.motor_set_speed(25)
                        controller.motor_set_step_type(True)
                        time.sleep(2)
                        controller.start_motor(400)

                        time.sleep(10)

                except KeyboardInterrupt:        
                        controller.async_stop()
                        controller.turn_off_all()
                        break
